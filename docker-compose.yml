version: '3.9'
services:

 db_master:
   image: postgres:13.3
   container_name: service_postgres1
   environment:
     - POSTGRES_DB=postgres
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=passwd
     - PGDATA=/var/lib/postgresql/data/pgdata
   ports:
        - "5433:5432"
   volumes:
    - ~/pgdataDocker1:/var/lib/postgresql/data
    - ./KafkaDockerSettings/db.sql:/docker-entrypoint-initdb.d/c.sql
   command: ['postgres', '-c', 'wal_level=logical']
   networks:
     web:
       ipv4_address: 172.16.238.2
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -U postgres -d ruglonass"]
     interval: 10s
     timeout: 5s
     retries: 5
   restart: always
   tty: true


 zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
     web:
       ipv4_address: 172.16.238.50


 broker1:
    image: wurstmeister/kafka
    container_name: broker1
    ports:
      - "8092:8092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_HOST://:8092, PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8092,PLAINTEXT://broker1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
     web:
       ipv4_address: 172.16.238.51


 broker2:
    image: wurstmeister/kafka
    container_name: broker2
    ports:
      - "8093:8093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_HOST://:8093, PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8093,PLAINTEXT://broker2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
     web:
       ipv4_address: 172.16.238.52


 debezium:
     build:
       context: .
       dockerfile: ./KafkaDockerSettings/debezium
     container_name: debezium
     extra_hosts:
         - "host.docker.internal:host-gateway"
     ports:
       - '8083:8083'
     environment:
       BOOTSTRAP_SERVERS: broker1:9092,broker2:9092
       GROUP_ID: 1
       CONFIG_STORAGE_TOPIC: connect_configs
       STATUS_STORAGE_TOPIC: connect_statuses
       OFFSET_STORAGE_TOPIC: connect_offsets
       KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       ENABLE_DEBEZIUM_SCRIPTING: 'true'
     networks:
      web:
        ipv4_address: 172.16.238.53


 sender_message:
     build:
       context: .
       dockerfile: ./KafkaDockerSettings/dockerFileSender
     volumes:
       - ./logs/:/var/logs
     depends_on:
       - broker1
       - broker2
     networks:
       web:
         ipv4_address: 172.16.238.54


networks:
  web:
    driver: bridge
    name: web
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.1